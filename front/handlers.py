import asyncio
import os
import uuid

from aiogram import F, Router, types
from aiogram.enums import ChatAction
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, BotCommand, BotCommandScopeDefault, FSInputFile, ReplyKeyboardRemove
from aiogram.utils.markdown import hbold, hcode

from config import ADMIN_IDS, logger
from filters import IsAdmin
from keyboards import confirm_delete_keyboard
from states import UploadStates
from utils import get_fastapi_client

router = Router()


async def set_commands(bot):
    user_commands = [BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"),
        BotCommand(command="/clear", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"), ]
    admin_commands = user_commands + [BotCommand(command="/upload", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"),
        BotCommand(command="/list_docs", description="–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"),
        BotCommand(command="/delete_doc", description="–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞)"), ]

    await bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())

    if ADMIN_IDS:
        for admin_id in ADMIN_IDS:
            try:
                await bot.set_my_commands(admin_commands, scope={"type": "chat", "chat_id": admin_id})
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {admin_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")


@router.message(CommandStart())
async def handle_start(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n"
                         "–Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏ 'Company Name'.\n"
                         "–ó–∞–¥–∞–≤–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


@router.message(Command("help"))
async def handle_help(message: Message):
    user_help_text = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                      "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                      "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
                      "/clear - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–æ–µ–π –ø–∞–º—è—Ç–∏")
    admin_help_text = user_help_text + ("\n\n"
                                        f"{hbold('–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')}\n"
                                        "/upload - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (txt, pdf, docx)\n"
                                        "/list_docs - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
                                        "/delete_doc [ID –∏–ª–∏ –ò–º—è —Ñ–∞–π–ª–∞] - –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ")

    if message.from_user.id in ADMIN_IDS:
        await message.answer(admin_help_text)
    else:
        await message.answer(user_help_text)


@router.message(Command("clear"))
async def handle_clear_history(message: Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏.")
    await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)

    async with get_fastapi_client() as client:
        try:
            response = await client.delete(f"/history/{user_id}")
            response.raise_for_status()
            result = response.json()
            await message.answer(result["message"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("upload"), IsAdmin())
async def handle_upload_start(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∑–∞–≥—Ä—É–∑–∫—É.")
    await state.set_state(UploadStates.waiting_for_file)
    await message.answer(
        "–•–æ—Ä–æ—à–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç (txt, pdf –∏–ª–∏ docx), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


@router.message(Command("cancel"), F.state == UploadStates.waiting_for_file)
async def handle_upload_cancel(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–≥—Ä—É–∑–∫—É.")
    await state.clear()
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())


@router.message(UploadStates.waiting_for_file, F.document, IsAdmin())
async def handle_document_upload(message: Message, state: FSMContext):
    user_id = message.from_user.id
    document = message.document
    original_filename = document.file_name
    file_id = document.file_id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–≥—Ä—É–∑–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç: {original_filename} (File ID: {file_id})")

    if not original_filename.lower().endswith(('.txt', '.pdf', '.docx')):
        await message.answer(
            f"–¢–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω: {original_filename}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª txt, pdf –∏–ª–∏ docx, –∏–ª–∏ /cancel.")
        return

    processing_msg = await message.answer(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª '{original_filename}'. –û–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await message.bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_DOCUMENT)

    try:
        file_info = await message.bot.get_file(file_id)
        file_path = f"uploads_telegram/{original_filename}"
        os.makedirs("uploads_telegram", exist_ok=True)
        await message.bot.download_file(file_info.file_path, file_path)

        await processing_msg.edit_text(
            f"‚úÖ –§–∞–π–ª '{hbold(original_filename)}' –ø—Ä–∏–Ω—è—Ç –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 20 –º–∏–Ω—É—Ç.")

        async with get_fastapi_client() as client:
            with open(file_path, "rb") as f:
                files = {"file": (original_filename, f, "application/octet-stream")}
                await client.post("/upload", files=files, timeout=2400)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await processing_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
            except OSError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        await state.clear()


@router.message(Command("list_docs"), IsAdmin())
async def handle_list_docs(message: Message):
    user_id = message.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
    await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)

    async with get_fastapi_client() as client:
        try:
            response = await client.get("/documents")
            response.raise_for_status()
            result = response.json()
            documents = result["documents"]

            if not documents:
                await message.answer("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
                return

            response_text = f"{hbold('–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:')}\n\n"
            for doc in documents:
                response_text += (f"üìÑ {hbold(doc['filename'])}\n"
                                  f"   - ID: {hcode(doc['_id'])}\n"
                                  f"   - –ó–∞–≥—Ä—É–∂–µ–Ω: {doc.get('upload_time_str', 'N/A')}\n"
                                  f"   - –§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {doc.get('chunk_count', 'N/A')}\n\n")

            if len(response_text) > 4000:
                await message.answer("–ù–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç—è–º–∏...")
                for i in range(0, len(response_text), 4000):
                    await message.answer(response_text[i:i + 4000])
                    await asyncio.sleep(0.5)
            else:
                await message.answer(response_text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("delete_doc"), IsAdmin())
async def handle_delete_doc_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    command_parts = message.text.split(maxsplit=1)

    if len(command_parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
                             f"–ü—Ä–∏–º–µ—Ä: {hcode('/delete_doc my_document.pdf')} –∏–ª–∏ {hcode('/delete_doc <document_id>')}\n"
                             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_docs –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö ID.")
        return

    doc_id_or_filename = command_parts[1].strip()
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ: {doc_id_or_filename}")

    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞ —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç '{hbold(doc_id_or_filename)}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π?",
        reply_markup=confirm_delete_keyboard(doc_id_or_filename))


@router.callback_query(F.data.startswith("confirm_delete:"))
async def handle_confirm_delete(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if user_id not in ADMIN_IDS:
        await callback_query.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    doc_id_or_filename = callback_query.data.split(":", 1)[1]
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ: {doc_id_or_filename}")

    await callback_query.message.edit_text(f"–£–¥–∞–ª–µ–Ω–∏–µ '{doc_id_or_filename}'...")
    await callback_query.bot.send_chat_action(callback_query.message.chat.id, ChatAction.TYPING)

    async with get_fastapi_client() as client:
        try:
            response = await client.delete(f"/documents/{doc_id_or_filename}")
            response.raise_for_status()
            result = response.json()

            if result["success"]:
                await callback_query.message.edit_text(f"‚úÖ {result['message']}")
            else:
                await callback_query.message.edit_text(f"‚ùå {result['message']}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await callback_query.message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await callback_query.answer()


@router.callback_query(F.data == "cancel_delete")
async def handle_cancel_delete(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ.")
    await callback_query.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer()


@router.message(Command("upload", "list_docs", "delete_doc"))
async def handle_admin_command_unauthorized(message: Message):
    logger.warning(
        f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}: {message.text}")
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@router.message(F.text & ~F.text.startswith('/'))
async def handle_text_message(message: Message):
    user_id = message.from_user.id
    question = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{question[:100]}...'")

    await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    processing_msg = await message.reply("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        async with get_fastapi_client() as client:
            response = await client.post("/ask", json={"user_id": user_id, "question": question}, timeout=250.0)
            response.raise_for_status()
            result = response.json()

            answer = result["answer"]
            metrics = result["metrics"]

            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏: {metrics}")

            if len(answer) > 4000:
                await processing_msg.edit_text("–û—Ç–≤–µ—Ç –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ–≥–æ —á–∞—Å—Ç—è–º–∏...")
                for i in range(0, len(answer), 4000):
                    await message.answer(answer[i:i + 4000])
                    await asyncio.sleep(0.5)
            else:
                await processing_msg.edit_text(answer)

            metrics_text = (f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞:\n"
                            f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {metrics.get('prompt_source', 'N/A')}\n"
                            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {metrics.get('classified_category', 'N/A')}\n"
                            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {metrics.get('rag_metrics', {}).get('used_chunks', 'N/A')}\n"
                            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {float(metrics.get('rag_metrics', {}).get('average_relevance_score', 0)):.3f}\n"
                            f"‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {float(metrics.get('rag_metrics', {}).get('generation_time', 0)):.1f}—Å\n"
                            f"‚Ä¢ –¢–æ–∫–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {metrics.get('rag_metrics', {}).get('context_tokens', 'N/A')}\n"
                            f"‚Ä¢ –¢–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞: {metrics.get('rag_metrics', {}).get('answer_tokens', 'N/A')}\n"
                            f"‚Ä¢ –§–∏–ª—å—Ç—Ä—ã Qdrant: {', '.join(metrics.get('rag_metrics', {}).get('qdrant_filters', ['–ù–µ—Ç']))}")
            await message.answer(metrics_text)

            os.makedirs("temp_metrics", exist_ok=True)
            metrics_file = f"temp_metrics/rag_metrics_{user_id}_{uuid.uuid4()}.txt"
            try:
                with open(metrics_file, "w", encoding="utf-8") as f:
                    f.write(f"=== RAG Metrics for User ID: {user_id} ===\n")
                    f.write(f"Question: {question}\n")
                    f.write(f"Answer: {answer}\n\n")
                    f.write("=== Metrics ===\n")
                    f.write(f"Prompt Source: {metrics.get('prompt_source', 'N/A')}\n")
                    f.write(f"Category: {metrics.get('classified_category', 'N/A')}\n")
                    f.write(f"Used Chunks: {metrics.get('rag_metrics', {}).get('used_chunks', 'N/A')}\n")
                    f.write(
                        f"Average Relevance Score: {metrics.get('rag_metrics', {}).get('average_relevance_score', 0):.3f}\n")
                    f.write(f"Generation Time: {metrics.get('rag_metrics', {}).get('generation_time', 0):.1f}s\n")
                    f.write(f"Context Tokens: {metrics.get('rag_metrics', {}).get('context_tokens', 'N/A')}\n")
                    f.write(f"Answer Tokens: {metrics.get('rag_metrics', {}).get('answer_tokens', 'N/A')}\n")
                    f.write(
                        f"Qdrant Filters: {', '.join(metrics.get('rag_metrics', {}).get('qdrant_filters', ['None']))}\n\n")
                    f.write("=== Context Chunks ===\n")
                    for i, chunk in enumerate(metrics.get('rag_metrics', {}).get('context_chunks', [])):
                        f.write(f"\n--- Chunk {i + 1} ---\n")
                        f.write(f"{chunk}\n")

                await message.answer_document(document=FSInputFile(metrics_file),
                    caption="–ü–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –º–µ—Ç—Ä–∏–∫: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏.")
            finally:
                try:
                    if os.path.exists(metrics_file):
                        os.remove(metrics_file)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –º–µ—Ç—Ä–∏–∫: {e}")

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await processing_msg.edit_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
